{"remainingRequest":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js!/home/fish/vue-pro/test/blockChainTest/node_modules/eslint-loader/index.js??ref--13-0!/home/fish/vue-pro/test/blockChainTest/src/store/modules/permission.js","dependencies":[{"path":"/home/fish/vue-pro/test/blockChainTest/src/store/modules/permission.js","mtime":1564801539914},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/home/fish/vue-pro/test/blockChainTest/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterAsyncRoutes = filterAsyncRoutes;\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"/home/fish/vue-pro/test/blockChainTest/node_modules/@babel/runtime-corejs2/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _router = require(\"@/router\");\n\n/**\n * Use meta.role to determine if the current user has permission\n * @param roles\n * @param route\n */\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.roles) {\n    return roles.some(function (role) {\n      return route.meta.roles.includes(role);\n    });\n  } else {\n    return true;\n  }\n}\n/**\n * Filter asynchronous routing tables by recursion\n * @param routes asyncRoutes\n * @param roles\n */\n\n\nfunction filterAsyncRoutes(routes, roles) {\n  var res = [];\n  routes.forEach(function (route) {\n    var tmp = (0, _objectSpread2.default)({}, route);\n\n    if (hasPermission(roles, tmp)) {\n      if (tmp.children) {\n        tmp.children = filterAsyncRoutes(tmp.children, roles);\n      }\n\n      res.push(tmp);\n    }\n  });\n  return res;\n}\n\nvar state = {\n  routes: [],\n  addRoutes: []\n};\nvar mutations = {\n  SET_ROUTES: function SET_ROUTES(state, routes) {\n    state.addRoutes = routes;\n    state.routes = _router.constantRoutes.concat(routes);\n  }\n};\nvar actions = {\n  generateRoutes: function generateRoutes(_ref, roles) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve) {\n      var accessedRoutes;\n\n      if (roles.includes('admin')) {\n        accessedRoutes = _router.asyncRoutes || [];\n      } else {\n        accessedRoutes = filterAsyncRoutes(_router.asyncRoutes, roles);\n      }\n\n      commit('SET_ROUTES', accessedRoutes);\n      resolve(accessedRoutes);\n    });\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}