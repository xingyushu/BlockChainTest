{"remainingRequest":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js!/home/fish/vue-pro/test/blockChainTest/node_modules/eslint-loader/index.js??ref--13-0!/home/fish/vue-pro/test/blockChainTest/src/filters/index.js","dependencies":[{"path":"/home/fish/vue-pro/test/blockChainTest/src/filters/index.js","mtime":1564801539906},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeAgo = timeAgo;\nexports.numberFormatter = numberFormatter;\nexports.toThousandFilter = toThousandFilter;\nexports.uppercaseFirst = uppercaseFirst;\nObject.defineProperty(exports, \"parseTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.parseTime;\n  }\n});\nObject.defineProperty(exports, \"formatTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.formatTime;\n  }\n});\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _utils = require(\"@/utils\");\n\n// import parseTime, formatTime and set to filter\n\n/**\n * Show plural label if time is plural number\n * @param {number} time\n * @param {string} label\n * @return {string}\n */\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n\n  return time + label + 's';\n}\n/**\n * @param {number} time\n */\n\n\nfunction timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n/**\n * Number formatting\n * like 10000 => 10k\n * @param {number} num\n * @param {number} digits\n */\n\n\nfunction numberFormatter(num, digits) {\n  var si = [{\n    value: 1E18,\n    symbol: 'E'\n  }, {\n    value: 1E15,\n    symbol: 'P'\n  }, {\n    value: 1E12,\n    symbol: 'T'\n  }, {\n    value: 1E9,\n    symbol: 'G'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'k'\n  }];\n\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value + 0.1).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n\n  return num.toString();\n}\n/**\n * 10000 => \"10,000\"\n * @param {number} num\n */\n\n\nfunction toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {\n    return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');\n  });\n}\n/**\n * Upper case first char\n * @param {String} string\n */\n\n\nfunction uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}",null]}