{"remainingRequest":"/home/fish/vue-pro/test/blockChainTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fish/vue-pro/test/blockChainTest/src/components/Sticky/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fish/vue-pro/test/blockChainTest/src/components/Sticky/index.vue","mtime":1564801539906},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Sticky',\n  props: {\n    stickyTop: {\n      type: Number,\n      default: 0\n    },\n    zIndex: {\n      type: Number,\n      default: 1\n    },\n    className: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      active: false,\n      position: '',\n      width: undefined,\n      height: undefined,\n      isSticky: false\n    }\n  },\n  mounted() {\n    this.height = this.$el.getBoundingClientRect().height\n    window.addEventListener('scroll', this.handleScroll)\n    window.addEventListener('resize', this.handleResize)\n  },\n  activated() {\n    this.handleScroll()\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.handleScroll)\n    window.removeEventListener('resize', this.handleResize)\n  },\n  methods: {\n    sticky() {\n      if (this.active) {\n        return\n      }\n      this.position = 'fixed'\n      this.active = true\n      this.width = this.width + 'px'\n      this.isSticky = true\n    },\n    handleReset() {\n      if (!this.active) {\n        return\n      }\n      this.reset()\n    },\n    reset() {\n      this.position = ''\n      this.width = 'auto'\n      this.active = false\n      this.isSticky = false\n    },\n    handleScroll() {\n      const width = this.$el.getBoundingClientRect().width\n      this.width = width || 'auto'\n      const offsetTop = this.$el.getBoundingClientRect().top\n      if (offsetTop < this.stickyTop) {\n        this.sticky()\n        return\n      }\n      this.handleReset()\n    },\n    handleResize() {\n      if (this.isSticky) {\n        this.width = this.$el.getBoundingClientRect().width + 'px'\n      }\n    }\n  }\n}\n",null]}