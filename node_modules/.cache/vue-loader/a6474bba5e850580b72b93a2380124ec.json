{"remainingRequest":"/home/fish/vue-pro/test/blockChainTest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fish/vue-pro/test/blockChainTest/src/components/MDinput/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fish/vue-pro/test/blockChainTest/src/components/MDinput/index.vue","mtime":1564801539906},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fish/vue-pro/test/blockChainTest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// source:https://github.com/wemake-services/vue-material-input/blob/master/src/components/MaterialInput.vue\n\nexport default {\n  name: 'MdInput',\n  props: {\n    /* eslint-disable */\n    icon: String,\n    name: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    value: [String, Number],\n    placeholder: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    min: String,\n    max: String,\n    step: String,\n    minlength: Number,\n    maxlength: Number,\n    required: {\n      type: Boolean,\n      default: true\n    },\n    autoComplete: {\n      type: String,\n      default: 'off'\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      currentValue: this.value,\n      focus: false,\n      fillPlaceHolder: null\n    }\n  },\n  computed: {\n    computedClasses() {\n      return {\n        'material--active': this.focus,\n        'material--disabled': this.disabled,\n        'material--raised': Boolean(this.focus || this.currentValue) // has value\n      }\n    }\n  },\n  watch: {\n    value(newValue) {\n      this.currentValue = newValue\n    }\n  },\n  methods: {\n    handleModelInput(event) {\n      const value = event.target.value\n      this.$emit('input', value)\n      if (this.$parent.$options.componentName === 'ElFormItem') {\n        if (this.validateEvent) {\n          this.$parent.$emit('el.form.change', [value])\n        }\n      }\n      this.$emit('change', value)\n    },\n    handleMdFocus(event) {\n      this.focus = true\n      this.$emit('focus', event)\n      if (this.placeholder && this.placeholder !== '') {\n        this.fillPlaceHolder = this.placeholder\n      }\n    },\n    handleMdBlur(event) {\n      this.focus = false\n      this.$emit('blur', event)\n      this.fillPlaceHolder = null\n      if (this.$parent.$options.componentName === 'ElFormItem') {\n        if (this.validateEvent) {\n          this.$parent.$emit('el.form.blur', [this.currentValue])\n        }\n      }\n    }\n  }\n}\n",null]}